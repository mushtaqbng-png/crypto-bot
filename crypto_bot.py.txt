import telebot
import requests
import time
from telebot import types

# üîë Replace with your actual bot token
TOKEN = "8299234360:AAGItwlS-bLtbsW0mN_fu1llGgm10Y8V68Y"
bot = telebot.TeleBot(TOKEN)

# ‚úÖ Predefined popular coins (CoinGecko IDs)
COINS = {
    "Bitcoin": "bitcoin",
    "Ethereum": "ethereum",
    "Binance Coin": "binancecoin",
    "Solana": "solana",
    "Dogecoin": "dogecoin",
    "Cardano": "cardano",
    "XRP": "xrp",
    "Toncoin": "the-open-network",
    "Polygon": "matic-network"
}

# üß† Simple in-memory cache to reduce API calls
cache = {}  # { "bitcoin": (price, timestamp) }

# --- Function to fetch and cache coin prices ---
def get_crypto_price(symbol):
    url = f"https://api.coingecko.com/api/v3/simple/price?ids={symbol}&vs_currencies=usd"
    print(f"Fetching {symbol} from CoinGecko...")  # üëÄ Log request
    try:
        response = requests.get(url, timeout=5)
        print(f"Status: {response.status_code}, Response: {response.text}")  # üëÄ Log response
        if response.status_code == 200:
            data = response.json()
            if symbol in data:
                price = data[symbol]["usd"]
                cache[symbol] = (price, time.time())
                return f"üí∞ *{symbol.capitalize()}* price: `${price:,}` USD"
        return "‚ö†Ô∏è Could not fetch price right now. Please try again later."
    except Exception as e:
        print(f"Error: {e}")  # üëÄ Log error
        return "‚ö†Ô∏è Could not fetch price right now. Please try again later."

# --- /start command handler ---
@bot.message_handler(commands=["start", "help"])
def send_welcome(message):
    markup = types.InlineKeyboardMarkup(row_width=2)
    buttons = [types.InlineKeyboardButton(name, callback_data=symbol) for name, symbol in COINS.items()]
    markup.add(*buttons)
    bot.send_message(
        message.chat.id,
        "üëã *Welcome to the Crypto Price Bot!*\n\nSelect a coin below to get its current price:",
        reply_markup=markup,
        parse_mode="Markdown"
    )

# --- Handle button clicks ---
@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    coin_id = call.data
    price_text = get_crypto_price(coin_id)
    bot.answer_callback_query(call.id)
    bot.send_message(call.message.chat.id, price_text, parse_mode="Markdown")

# --- /price command (manual input) ---
@bot.message_handler(commands=["price"])
def send_price(message):
    parts = message.text.split()
    if len(parts) < 2:
        bot.reply_to(message, "‚ö†Ô∏è Usage: /price <coin>\nExample: `/price bitcoin`", parse_mode="Markdown")
        return
    coin = parts[1].lower()
    reply = get_crypto_price(coin)
    bot.reply_to(message, reply, parse_mode="Markdown")

# --- Start polling ---
print("ü§ñ Bot is running...")
bot.polling(non_stop=True)
